# -*- coding: utf-8 -*-
#
# NIST-developed software is provided by NIST as a public service. You may
# use, copy and distribute copies of the software in any medium, provided that
# you keep intact this entire notice. You may improve, modify and create
# derivative works of the software or any portion of the software, and you may
# copy and distribute such modifications or works. Modified works should carry
# a notice stating that you changed the software and should note the date and
# nature of any such change. Please explicitly acknowledge the National
# Institute of Standards and Technology as the source of the software.
#
# NIST-developed software is expressly provided "AS IS." NIST MAKES NO
# WARRANTY OF ANY KIND, EXPRESS, IMPLIED, IN FACT OR ARISING BY OPERATION OF
# LAW, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTY OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT AND DATA ACCURACY. NIST
# NEITHER REPRESENTS NOR WARRANTS THAT THE OPERATION OF THE SOFTWARE WILL BE
# UNINTERRUPTED OR ERROR-FREE, OR THAT ANY DEFECTS WILL BE CORRECTED. NIST
# DOES NOT WARRANT OR MAKE ANY REPRESENTATIONS REGARDING THE USE OF THE
# SOFTWARE OR THE RESULTS THEREOF, INCLUDING BUT NOT LIMITED TO THE
# CORRECTNESS, ACCURACY, RELIABILITY, OR USEFULNESS OF THE SOFTWARE.
#
# You are solely responsible for determining the appropriateness of using and
# distributing the software and you assume all risks associated with its use,
# including but not limited to the risks and costs of program errors,
# compliance with applicable laws, damage to or loss of data, programs or
# equipment, and the unavailability or interruption of operation. This
# software is not intended to be used in any situation where a failure could
# cause risk of injury or damage to property. The software developed by NIST
# employees is not subject to copyright protection within the United States.

"""
Module with the Adaptive Modulation Coding information. It contains a constant
dictionary with the TBS for 1 to 50 RBs for each value of the MCS, and a
function that returns how many RBs are needed to provide a given data rate at
a given MCS.
"""

TBS_FOR_MCS = {0:  [float('nan'), 2, 4, 7, 11, 15, 19, 22, 26, 28, 32, 36, 41,
                    43, 47, 49, 53, 57, 61, 63, 67, 71, 75, 77, 81, 85, 89, 93,
                    97, 97, 101, 105, 109, 113, 117, 121, 125, 129, 129, 133,
                    137, 141, 145, 149, 153, 157, 157, 131, 135, 139, 173],
               1:  [float('nan'), 3, 7, 11, 18, 22, 26, 28, 32, 41, 43, 47, 53,
                    57, 61, 65, 71, 75, 79, 85, 89, 93, 97, 101, 109, 113, 117,
                    121, 125, 129, 133, 141, 145, 149, 153, 157, 161, 169, 173,
                    177, 177, 185, 193, 193, 201, 201, 209, 217, 217, 225, 225],
               2:  [float('nan'), 4, 9, 18, 22, 26, 32, 37, 41, 47, 53, 59, 65,
                    71, 77, 81, 87, 93, 97, 105, 109, 117, 121, 125, 133, 137,
                    145, 149, 157, 131, 135, 173, 177, 185, 193, 193, 201, 209,
                    209, 217, 225, 225, 233, 241, 249, 253, 261, 261, 269, 277,
                    277],
               3:  [float('nan'), 5, 13, 22, 26, 32, 41, 49, 55, 63, 71, 77,
                    85, 93, 101, 109, 113, 121, 129, 137, 145, 153, 157, 165,
                    173, 177, 185, 193, 201, 209, 217, 225, 233, 241, 249, 253,
                    261, 269, 277, 285, 293, 301, 309, 317, 317, 325, 333, 341,
                    349, 357, 357],
               4:  [float('nan'), 7, 15, 26, 32, 41, 51, 61, 69, 79, 87, 97,
                    105, 113, 125, 133, 141, 149, 161, 169, 177, 185, 193, 201,
                    217, 225, 233, 241, 249, 261, 269, 277, 285, 293, 301, 309,
                    325, 333, 341, 349, 357, 373, 373, 389, 389, 405, 405, 421,
                    437, 437, 453],
               5:  [float('nan'), 9, 18, 28, 41, 53, 63, 75, 85, 97, 109, 121,
                    129, 141, 153, 165, 173, 185, 193, 209, 217, 233, 241, 253,
                    261, 277, 285, 293, 309, 317, 333, 341, 349, 357, 373, 389,
                    389, 405, 421, 437, 437, 453, 469, 469, 485, 501, 501, 517,
                    533, 549, 549],
               6:  [float('nan'), 41, 22, 32, 49, 63, 75, 89, 101, 117, 129,
                    141, 153, 169, 185, 193, 209, 217, 233, 249, 261, 277, 285,
                    301, 309, 325, 341, 349, 373, 373, 389, 405, 421, 437, 437,
                    453, 469, 485, 501, 517, 517, 533, 549, 573, 573, 597, 597,
                    621, 621, 645, 645],
               7:  [float('nan'), 13, 28, 41, 59, 79, 89, 105, 121, 137, 153,
                    165, 185, 201, 209, 225, 241, 261, 277, 293, 309, 317, 333,
                    349, 373, 389, 405, 421, 421, 437, 453, 469, 485, 501, 517,
                    533, 549, 573, 573, 597, 621, 621, 645, 669, 669, 693, 717,
                    717, 749, 749, 775],
               8:  [float('nan'), 15, 32, 49, 67, 85, 101, 121, 137, 157, 173,
                    193, 209, 225, 241, 261, 277, 293, 317, 333, 349, 373, 389,
                    405, 421, 437, 453, 469, 485, 501, 533, 549, 573, 573, 597,
                    621, 621, 645, 669, 693, 693, 717, 749, 749, 775, 775, 807,
                    807, 839, 871, 871],
               9:  [float('nan'), 17, 37, 57, 77, 97, 117, 137, 157, 177, 193,
                    217, 233, 253, 277, 293, 317, 333, 357, 373, 389, 421, 437,
                    453, 469, 201, 217, 233, 249, 273, 297, 621, 645, 645, 669,
                    693, 717, 717, 749, 775, 775, 807, 839, 839, 871, 871, 903,
                    935, 935, 967, 999],
               10: [float('nan'), 17, 37, 57, 77, 97, 117, 137, 157, 177, 193,
                    217, 233, 253, 277, 293, 317, 333, 357, 373, 389, 421, 437,
                    453, 469, 201, 217, 233, 249, 273, 297, 621, 645, 645, 669,
                    693, 717, 717, 749, 775, 775, 807, 839, 839, 871, 871, 903,
                    935, 935, 967, 999],
               11: [float('nan'), 18, 41, 63, 85, 109, 129, 153, 173, 193, 217,
                    241, 261, 285, 309, 333, 349, 373, 389, 421, 437, 469, 485,
                    501, 533, 549, 573, 597, 621, 645, 669, 693, 717, 717, 749,
                    775, 775, 807, 839, 839, 871, 903, 935, 935, 967, 999, 999,
                    1031, 1063, 1063, 1095],
               12: [float('nan'), 22, 47, 73, 97, 125, 149, 173, 201, 225, 253,
                    277, 301, 325, 349, 373, 405, 437, 453, 485, 501, 533, 549,
                    573, 597, 621, 669, 693, 717, 749, 749, 775, 807, 839, 871,
                    871, 903, 935, 967, 967, 999, 1031, 1063, 1095, 1095, 1143,
                    1143, 1191, 1191, 1239, 1239],
               13: [float('nan'), 26, 55, 85, 113, 141, 169, 201, 225, 253,
                    285, 309, 341, 373, 405, 421, 453, 485, 517, 549, 573, 597,
                    621, 669, 693, 717, 749, 775, 807, 839, 839, 871, 903, 935,
                    967, 999, 1031, 1063, 1095, 1095, 1143, 1191, 1191, 1239,
                    1239, 1287, 1335, 1335, 1383, 1383, 1431],
               14: [float('nan'), 28, 61, 93, 125, 157, 193, 225, 253, 285,
                    317, 357, 389, 421, 453, 485, 517, 549, 573, 621, 645, 669,
                    717, 749, 775, 807, 839, 871, 903, 935, 967, 999, 1031,
                    1063, 1095, 1143, 1143, 1191, 1239, 1239, 1287, 1335, 1335,
                    1383, 1431, 1431, 1479, 1527, 1527, 1572, 1620],
               15: [float('nan'), 32, 69, 105, 141, 177, 217, 249, 285, 325,
                    357, 389, 437, 469, 501, 533, 573, 621, 645, 693, 717, 749,
                    775, 807, 871, 903, 935, 967, 999, 1031, 1063, 1095, 1143,
                    1191, 1239, 1239, 1287, 1335, 1383, 1383, 1431, 1479, 1527,
                    1527, 1572, 1620, 1620, 1692, 1692, 1764, 1764],
               16: [float('nan'), 35, 75, 113, 153, 193, 225, 269, 309, 341,
                    389, 421, 453, 501, 533, 573, 621, 645, 693, 717, 775, 807,
                    839, 871, 903, 967, 999, 1031, 1063, 1095, 1143, 1191,
                    1239, 1287, 1287, 1335, 1383, 1431, 1479, 1479, 1527, 1572,
                    1620, 1620, 1692, 1692, 1764, 1836, 1836, 1908, 1908],
               17: [float('nan'), 35, 75, 113, 153, 193, 225, 269, 309, 341,
                    389, 421, 453, 501, 533, 573, 621, 645, 693, 717, 775, 807,
                    839, 871, 903, 967, 999, 1031, 1063, 1095, 1143, 1191,
                    1239, 1287, 1287, 1335, 1383, 1431, 1479, 1479, 1527, 1572,
                    1620, 1620, 1692, 1692, 1764, 1836, 1836, 1908, 1908],
               18: [float('nan'), 41, 79, 121, 161, 201, 241, 285, 325, 373,
                    405, 453, 485, 533, 573, 621, 645, 693, 749, 775, 807, 839,
                    903, 935, 967, 999, 1063, 1095, 1143, 1191, 1239, 1239,
                    1287, 1335, 1383, 1431, 1479, 1527, 1527, 1572, 1620, 1692,
                    1692, 1764, 1764, 1836, 1836, 1908, 1980, 1980, 2052],
               19: [float('nan'), 42, 87, 133, 177, 225, 269, 317, 357, 405,
                    453, 501, 549, 597, 645, 669, 717, 775, 807, 839, 903, 935,
                    999, 1031, 1095, 1143, 1191, 1239, 1287, 1287, 1335, 1383,
                    1431, 1479, 1527, 1572, 1620, 1692, 1692, 1764, 1836, 1836,
                    1908, 1908, 1980, 2052, 2052, 2124, 2196, 2196, 2292],
               20: [float('nan'), 47, 97, 145, 193, 249, 293, 649, 689, 453,
                    501, 549, 597, 645, 693, 749, 775, 839, 903, 935, 999,
                    1031, 1095, 1143, 1191, 1239, 1287, 1335, 1383, 1431, 1479,
                    1527, 1572, 1620, 1692, 1764, 1764, 1836, 1908, 1908, 1980,
                    2052, 2052, 2124, 2196, 2196, 2292, 2292, 2385, 2385, 2481],
               21: [float('nan'), 51, 105, 161, 217, 269, 325, 373, 437, 485,
                    533, 597, 645, 693, 749, 807, 871, 903, 967, 1031, 1063,
                    1143, 1191, 1239, 1287, 1335, 1383, 1431, 1527, 1572, 1620,
                    1692, 1692, 1764, 1836, 1908, 1908, 1980, 2052, 2124, 2124,
                    2196, 2292, 2292, 2385, 2385, 2481, 2577, 2577, 2673, 2673],
               22: [float('nan'), 55, 113, 173, 233, 293, 349, 405, 469, 517,
                    573, 645, 693, 749, 807, 871, 935, 999, 1031, 1095, 1143,
                    1239, 1287, 1335, 1383, 1431, 1527, 1572, 1620, 1692, 1764,
                    1836, 1836, 1908, 1980, 2052, 2124, 2124, 2196, 2292, 2292,
                    2385, 2481, 2481, 2577, 2577, 2673, 2769, 2769, 2865, 2865],
               23: [float('nan'), 61, 125, 185, 249, 309, 373, 437, 501, 573,
                    621, 693, 749, 807, 871, 935, 999, 1063, 1143, 1191, 1239,
                    1335, 1383, 1431, 1527, 1572, 1620, 1692, 1764, 1836, 1908,
                    1980, 1980, 2052, 2124, 2196, 2292, 2292, 2385, 2481, 2481,
                    2577, 2673, 2673, 2769, 2865, 2865, 2961, 3062, 3062, 3182],
               24: [float('nan'), 62, 133, 201, 269, 333, 405, 469, 533, 597,
                    669, 749, 807, 871, 935, 999, 1063, 1143, 1191, 1287, 1335,
                    1431, 1479, 1572, 1620, 1692, 1764, 1836, 1908, 1980, 2052,
                    2124, 2124, 2196, 2292, 2385, 2385, 2481, 2577, 2673, 2673,
                    2769, 2865, 2865, 2961, 3062, 3062, 3182, 3182, 3302, 3422],
               25: [float('nan'), 69, 141, 217, 285, 357, 437, 501, 573, 645,
                    717, 775, 871, 935, 999, 1063, 1143, 1239, 1287, 1383, 1431,
                    1527, 1572, 1620, 1692, 1746, 1836, 1908, 1980, 2052, 2124,
                    2196, 2292, 2385, 2481, 2481, 2577, 2673, 2769, 2769, 2865,
                    2961, 3062, 3062, 3182, 3182, 3302, 3422, 3422, 3542, 3542],
               26: [float('nan'), 73, 149, 225, 301, 373, 453, 533, 621, 693,
                    749, 839, 903, 999, 1063, 1143, 1239, 1287, 1383, 1431,
                    1527, 1620, 1692, 1764, 1836, 1908, 1980, 2052, 2124, 2196,
                    2292, 2385, 2481, 2481, 2577, 2673, 2769, 2865, 2865, 2961,
                    3062, 3182, 3182, 3302, 3302, 3422, 3542, 3542, 3662, 3662,
                    3822],
               27: [float('nan'), 77, 157, 233, 317, 389, 469, 549, 645, 717,
                    775, 871, 935, 1031, 1095, 1191, 1287, 1335, 1431, 1527,
                    1572, 1692, 1764, 1836, 1908, 1980, 2052, 2124, 2196, 2292,
                    2385, 2481, 2577, 2577, 2673, 2769, 2865, 2961, 3062, 3062,
                    3128, 3302, 3302, 3422, 3542, 3542, 3662, 3662, 3822, 3963,
                    3963],
               28: [float('nan'), 89, 185, 277, 373, 469, 549, 645, 749, 839,
                    935, 1031, 1095, 1191, 1287, 1383, 1479, 1572, 1692, 1746,
                    1836, 1908, 2052, 2124, 2196, 2292, 2385, 2481, 2577, 2673,
                    2769, 2854, 2961, 3062, 3182, 3182, 3302, 3422, 3542, 3662,
                    3662, 3822, 3822, 3963, 4107, 4107, 4251, 4395, 4395, 4587,
                    4587]
              }


def get_rbs_for_rate(mcs, rate):
    """
    Get the number of RBs needed to provide the requested data rate at the
    provided MCS
    """
    count = 0
    total_acum = 0
    i = 0
    found = False
    rate_bytes = rate / 8 # Table is in bytes; rate in bits
    while not found and i < 1000:
        for value in TBS_FOR_MCS[mcs][1:]:
            tti_acum = total_acum + value
            count += 1
            if tti_acum > rate_bytes:
                found = True
                break
        i += 1
        total_acum += TBS_FOR_MCS[mcs][-1]
    return found, count
